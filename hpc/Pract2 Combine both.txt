#include <iostream>
#include <vector>
#include <omp.h>
#include <chrono>  // Include chrono for timing
using namespace std;
using namespace chrono;  // To simplify the syntax for chrono

// Sequential Bubble Sort
void bubbleSortSeq(vector<int>& arr){
    int n = arr.size(); 
    for (int i = 0; i < n-1; i++){
        for (int j = 0; j < n-i-1; j++){
            if (arr[j] > arr[j+1]){
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

// Parallel Bubble Sort
void bubbleSortPara(vector<int>& arr){
    int n = arr.size();
    for (int i = 0; i < n-1; i++){
        #pragma omp parallel for
        for (int j = i%2; j < n-1; j += 2){
            if (arr[j] > arr[j+1]){
                swap(arr[j], arr[j+1]);
            }
        }
    }
}

// Merge function
void merge(vector<int>& arr, int l, int m, int r){
    vector<int> left(arr.begin()+l, arr.begin()+m+1);
    vector<int> right(arr.begin()+m+1, arr.begin()+r+1);
    
    int i = 0, j = 0, k = l;
    while (i < left.size() && j < right.size())
        arr[k++] = (left[i] < right[j]) ? left[i++] : right[j++];
    while (i < left.size()) arr[k++] = left[i++];
    while (j < right.size()) arr[k++] = right[j++];
}

// Sequential Merge Sort
void mergeSeq(vector<int>& arr, int l, int r){
    if (l < r){
        int m = (l+r)/2;
        mergeSeq(arr, l, m);
        mergeSeq(arr, m+1, r);
        merge(arr, l, m, r);
    }
}

// Parallel Merge Sort
void mergePara(vector<int>& arr, int l, int r){
    if (l < r){
        int m = (l+r)/2;
        #pragma omp parallel sections
        {
            #pragma omp section
            mergePara(arr, l, m);
            #pragma omp section
            mergePara(arr, m+1, r);
        }
        merge(arr, l, m, r);
    }
}

int main(){
    vector<int> data = {6,1,67,3,12,0,34};
    vector<int> arr1 = data;
    vector<int> arr2 = data;
    vector<int> arr3 = data;
    vector<int> arr4 = data;

    // Sequential Bubble Sort Timing
    auto start = high_resolution_clock::now();  // Start timer
    bubbleSortSeq(arr1);
    auto stop = high_resolution_clock::now();   // Stop timer
    auto duration = duration_cast<microseconds>(stop - start); // Calculate duration
    cout << "Sequential Bubble Sort: ";
    for (int x : arr1) cout << x << " ";
    cout << "\nTime taken: " << duration.count() << " microseconds\n";

    // Parallel Bubble Sort Timing
    start = high_resolution_clock::now();
    bubbleSortPara(arr2);
    stop = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop - start);
    cout << "Parallel Bubble Sort: ";
    for (int x : arr2) cout << x << " ";
    cout << "\nTime taken: " << duration.count() << " microseconds\n";

    // Sequential Merge Sort Timing
    start = high_resolution_clock::now();
    mergeSeq(arr3, 0, arr3.size()-1);
    stop = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop - start);
    cout << "Sequential Merge Sort: ";
    for (int x : arr3) cout << x << " ";
    cout << "\nTime taken: " << duration.count() << " microseconds\n";

    // Parallel Merge Sort Timing
    start = high_resolution_clock::now();
    mergePara(arr4, 0, arr4.size()-1);
    stop = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop - start);
    cout << "Parallel Merge Sort: ";
    for (int x : arr4) cout << x << " ";
    cout << "\nTime taken: " << duration.count() << " microseconds\n";

    return 0;
}