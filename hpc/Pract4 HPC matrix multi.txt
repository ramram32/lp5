// install nvcc and cuda toolkit This installs CUDA 11.8, which works correctly with Colab GPUs
!apt-get update
!apt-get install -y cuda-toolkit-11-8
!nvcc --version





// code
%%writefile matrix_multiply.cu
#include <iostream>
using namespace std;

// CUDA Kernel to multiply matrices
__global__ void multiply(int* A, int* B, int* C, int N) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < N && col < N) {
        int sum = 0;
        for (int i = 0; i < N; i++) {
            sum += A[row * N + i] * B[i * N + col];
        }
        C[row * N + col] = sum;
    }
}

// Helper function to initialize matrix
void initialize(int* matrix, int N) {
    for (int i = 0; i < N * N; i++) {
        matrix[i] = rand() % 10;
    }
}

// Helper function to print matrix
void printMatrix(int* matrix, int N) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            cout << matrix[row * N + col] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

int main() {
    int N = 2;  // Matrix size

    int size = N * N;
    size_t bytes = size * sizeof(int);

    int *A, *B, *C;
    int *d_A, *d_B, *d_C;

    A = new int[size];
    B = new int[size];
    C = new int[size];

    initialize(A, N);
    initialize(B, N);

    cout << "Matrix A:" << endl;
    printMatrix(A, N);
    cout << "Matrix B:" << endl;
    printMatrix(B, N);

    cudaMalloc(&d_A, bytes);
    cudaMalloc(&d_B, bytes);
    cudaMalloc(&d_C, bytes);

    cudaMemcpy(d_A, A, bytes, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, B, bytes, cudaMemcpyHostToDevice);

    dim3 threads(2, 2);
    dim3 blocks(1, 1);

    multiply<<<blocks, threads>>>(d_A, d_B, d_C, N);
    cudaDeviceSynchronize();

    cudaMemcpy(C, d_C, bytes, cudaMemcpyDeviceToHost);

    cout << "Result Matrix C (A x B):" << endl;
    printMatrix(C, N);

    delete[] A;
    delete[] B;
    delete[] C;

    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    return 0;
}


//compile
!nvcc -arch=sm_70 matrix_multiply.cu -o matrix_multiply


//run
!./matrix_multiply

