// MergeSort.cpp
#include <iostream>
#include <vector>
#include <omp.h>
using namespace std;

void merge(vector<int>& arr, int l, int m, int r) {
    vector<int> left(arr.begin() + l, arr.begin() + m + 1);
    vector<int> right(arr.begin() + m + 1, arr.begin() + r + 1);

    int i = 0, j = 0, k = l;
    while (i < left.size() && j < right.size())
        arr[k++] = (left[i] < right[j]) ? left[i++] : right[j++];
    while (i < left.size()) arr[k++] = left[i++];
    while (j < right.size()) arr[k++] = right[j++];
}

void mergeSeq(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        mergeSeq(arr, l, m);
        mergeSeq(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void mergePara(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = (l + r) / 2;
        #pragma omp parallel sections
        {
            #pragma omp section
            mergePara(arr, l, m);
            #pragma omp section
            mergePara(arr, m + 1, r);
        }
        merge(arr, l, m, r);
    }
}

int main() {
    vector<int> data = {6,1,67,3,12,0,34};
    vector<int> arr1 = data;
    vector<int> arr2 = data;

    mergeSeq(arr1, 0, arr1.size() - 1);
    mergePara(arr2, 0, arr2.size() - 1);

    cout << "Sequential Merge Sort: ";
    for (int x : arr1) cout << x << " ";

    cout << "\nParallel Merge Sort: ";
    for (int x : arr2) cout << x << " ";

    return 0;
}