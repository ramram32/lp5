// install nvcc and cuda toolkit This installs CUDA 11.8, which works correctly with Colab GPUs
!apt-get update
!apt-get install -y cuda-toolkit-11-8
!nvcc --version





// code
%%writefile simple_vector_add.cu
#include <iostream>
#include <cstdlib>
using namespace std;

// CUDA kernel to add two vectors
__global__ void addVectors(int *A, int *B, int *C, int n) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        C[idx] = A[idx] + B[idx];
    }
}

int main() {
    srand(time(0));  // Add this line to make random values different every time
    int n = 100; // Large vector size
  
    // Allocate memory on CPU
    int *A = new int[n];
    int *B = new int[n];
    int *C = new int[n];

    // Initialize vectors with random values
    for (int i = 0; i < n; i++) {
        A[i] = rand() % 10;
        B[i] = rand() % 10;
    }

    // Allocate memory on GPU
    int *d_A, *d_B, *d_C;
    cudaMalloc(&d_A, n * sizeof(int));
    cudaMalloc(&d_B, n * sizeof(int));
    cudaMalloc(&d_C, n * sizeof(int));

    // Copy data to device
    cudaMemcpy(d_A, A, n * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, B, n * sizeof(int), cudaMemcpyHostToDevice);

    // Launch kernel
    int threadsPerBlock = 256;
    int blocksPerGrid = (n + threadsPerBlock - 1) / threadsPerBlock;
    addVectors<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, n);

    cudaMemcpy(C, d_C, n * sizeof(int), cudaMemcpyDeviceToHost);

    // Print the first 10 elements
    cout << "Vector A (Random 3 no.):" << endl;
    for (int i = 0; i < 3; i++) cout << A[i] << " ";
    cout << endl;

    cout << "Vector B (Random 3 no.):" << endl;
    for (int i = 0; i < 3; i++) cout << B[i] << " ";
    cout << endl;

    cout << "Result Vector C (A+B):" << endl;
    for (int i = 0; i < 3; i++) cout << C[i] << " ";
    cout << endl;

    // Free memory
    delete[] A;
    delete[] B;
    delete[] C;
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    return 0;
}



//compile
!nvcc -arch=sm_70 simple_vector_add.cu -o simple_vector_add


//run
!./simple_vector_add

